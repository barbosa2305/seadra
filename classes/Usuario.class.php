<?php
/**
 * System generated by SysGen (System Generator with Formdin Framework) 
 * Download SysGen: https://github.com/bjverde/sysgen
 * Download Formdin Framework: https://github.com/bjverde/formDin
 * 
 * SysGen  Version: 0.9.0
 * FormDin Version: 4.2.7-alpha
 * 
 * System seadra created in: 2018-12-03 21:17:58
 */

class Usuario {

	const SENHA_PADRAO = '12345678';
	const SENHA_TAMANHO_MINIMO = 8;

	public function __construct(){
	}
	//--------------------------------------------------------------------------------
	public static function selectById( $id ){
		$result = UsuarioDAO::selectById( $id );
		return self::trataDados( $result );
	}
	//--------------------------------------------------------------------------------
	public static function selectCount( $where=null ){
		return UsuarioDAO::selectCount( $where );
	}
	//--------------------------------------------------------------------------------
	public static function selectAllPagination( $orderBy=null, $where=null, $page=null,  $rowsPerPage= null){
		$result = UsuarioDAO::selectAllPagination( $orderBy, $where, $page,  $rowsPerPage );
		return self::trataDados( $result );
	}
	//--------------------------------------------------------------------------------
	public static function selectAll( $orderBy=null, $where=null ){
		$result = UsuarioDAO::selectAll( $orderBy, $where );
		return self::trataDados($result);
	}
	//--------------------------------------------------------------------------------
	public static function save( UsuarioVO $objVo ){
		$result = null;
		self::validarPermissoes( $objVo );
		if( $objVo->getIdusuario() ) {
			$result = UsuarioDAO::update( $objVo );
		} else {
			self::validarUsuarioJaCadastrado( $objVo );
			$pwd_user_hash = password_hash( self::SENHA_PADRAO,PASSWORD_DEFAULT );
			$objVo->setDssenha( $pwd_user_hash );
			$result = UsuarioDAO::insert( $objVo );
		}
		return $result;
	}
	//--------------------------------------------------------------------------------
	public static function delete( UsuarioVO $objVo ){
		self::validarPermissoes( $objVo,TRUE );
		$objVo->setStativo( STATUS_INATIVO );
		return UsuarioDAO::updateStatus( $objVo );
	}
	//--------------------------------------------------------------------------------
	public static function alterarSenha( UsuarioVO $objVo, $pwd_user_current=null, $pwd_user_new=null, $pwd_user_new_repeat=null ) {
		$pwd_user_hash = null;
		$user = UsuarioDAO::selectByLoginAtivo( $objVo->getDslogin() );
		self::validarSenha( $pwd_user_current,$pwd_user_new,$pwd_user_new_repeat,$user['DSSENHA'][0] );
		$pwd_user_hash = password_hash( $pwd_user_new,PASSWORD_DEFAULT );
		$objVo->setDssenha( $pwd_user_hash );
		return UsuarioDAO::updatePassword( $objVo );
	}
	//--------------------------------------------------------------------------------
	public static function redefinirSenha( UsuarioVO $objVo ) {
		$pwd_user_hash = null;
		self::validarPermissoes( $objVo );	
		self::validarSenha( self::SENHA_PADRAO );
		$pwd_user_hash = password_hash( self::SENHA_PADRAO,PASSWORD_DEFAULT );
		$objVo->setDssenha( $pwd_user_hash );
		return UsuarioDAO::updatePassword( $objVo );
	}
	//--------------------------------------------------------------------------------
	private static function trataDados($dados){
	    if( isset($dados) ){
	        foreach ($dados['STATIVO'] as $key => $value) {
	            $dsPrincipal = 'Erro';
	            if( $value == 'S' ){
	                $dsPrincipal = 'Sim';
	            } else {
	                $dsPrincipal = 'Não';
	            }
	            $dados['DSATIVO'][$key]  = $dsPrincipal;
			}

			foreach ($dados['TPGRUPO'] as $key => $value) {
	            $dsPrincipal = 'Erro';
	            if( $value == 'A' ){
	                $dsPrincipal = 'Administradores';
	            } else {
	                $dsPrincipal = 'Usuários';
	            }
	            $dados['DSGRUPO'][$key]  = $dsPrincipal;
			}
	    }
	    return $dados;
	}
	//--------------------------------------------------------------------------------
	private static function validarPermissoes( UsuarioVO $objVo,$acaoDelete=FALSE ) {
		if ( Acesso::getUserGroup() != Acesso::USER_GRUPO_ADMIN ){
			throw new DomainException( Mensagem::OPERACAO_NAO_PERMITIDA );
		}
		if ( strtolower($objVo->getDslogin()) == Acesso::USER_ADMIN && !(Acesso::isUserLoggedAdm()) ){
			throw new DomainException( Mensagem::OPERACAO_NAO_PERMITIDA );
		}
		if ( (strtolower($objVo->getDslogin()) == Acesso::getUserLogin()) && 
				($objVo->getStativo() == STATUS_INATIVO) ){
			throw new DomainException(Mensagem::OPERACAO_NAO_PERMITIDA);
		}
		if ($acaoDelete) {
			if( strtolower($objVo->getDslogin()) == Acesso::getUserLogin() ){
				throw new DomainException(Mensagem::OPERACAO_NAO_PERMITIDA); 
			}
		}
	}
    //--------------------------------------------------------------------------------
	private static function validarSenha( $pwd_user_current,$pwd_user_new=null,$pwd_user_new_repeat=null,$pwd_user_current_coded=null ) {
		if ( strlen( $pwd_user_current ) < self::SENHA_TAMANHO_MINIMO ) {
			throw new DomainException(Mensagem::SENHA_TAMANHO_MINIMO);
		}
		if ( !empty($pwd_user_new) ) {
			if ( strlen( $pwd_user_new ) < self::SENHA_TAMANHO_MINIMO ) {
				throw new DomainException(Mensagem::SENHA_TAMANHO_MINIMO);
			}
		}
		if ( !empty($pwd_user_current) && !empty($pwd_user_current_coded) ) {
			if ( !password_verify($pwd_user_current, $pwd_user_current_coded) ) {
				throw new DomainException(Mensagem::SENHA_ATUAL_INCORRETA);
			}
		}
		if ( !empty($pwd_user_new_repeat) ) {
			if ( $pwd_user_new != $pwd_user_new_repeat ) {
				throw new DomainException(Mensagem::SENHAS_NAO_COINCIDEM);
			}
		}
	}
	//--------------------------------------------------------------------------------
    private static function validarUsuarioJaCadastrado( UsuarioVO $objVo ){
        $dsLogin = $objVo->getDslogin();
        $where['DSLOGIN'] = $dsLogin;
        $dados = self::selectAll(null, $where);
        if( !empty($dados) ){
            throw new DomainException(Mensagem::USUARIO_JA_CADASTRADO); 
        }
    }
}
?>